generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // مهم لـ PlanetScale
}

model User {
  id                    String    @id @default(uuid())
  email                 String    @unique
  password              String
  name                  String?
  verified              Boolean   @default(false)
  verificationCode      String?
  verificationExpiresAt DateTime?
  credits               Int       @default(0)
  cashableCredits       Int       @default(0)

  referralCode   String? @unique // كود الريفيرال الخاص فيه
  referralsCount Int     @default(0) // كم شخص سجل بكوده
  earnings       Int     @default(0) // أرباحه

  role String @default("USER") // USER | ADMIN
  isBanned   Boolean @default(false)  // ✅ جديد
  isDeleted  Boolean @default(false)  // ✅ جديد

  // علاقات
  creditLogs    CreditLog[]
  creditsUsage  CreditsUsage[]
  refreshTokens RefreshToken[]

  referralsMade ReferralLog[] @relation("ReferralsMade") // ✅ بدون fields/references
  referralsUsed ReferralLog[] @relation("ReferralsUsed") // ✅ بدون fields/references

  // Brand customization
  logoUrl    String?
  brandColor String?
  fontFamily String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects       Project[]
  projectMembers ProjectMember[]
  schedules      Schedule[]
  notifications  Notification[]
  orders         Order[]
  withdrawals    WithdrawalRequest[]
  achievements   Achievement[]
  comments       Comment[]
  auditLogs      AuditLog[]
  mediaLibrary   MediaLibrary[]
  Product        Product[]
  Workspace      Workspace?          @relation(fields: [workspaceId], references: [id])
  workspaceId    String?

  integrations UserIntegration[]
  apiUsage     ApiUsage[]
  errors       IntegrationErrorLog[]
    planRequests PlanRequest[]          // ✅ علاقة جديدة

}

model ReferralLog {
  id        String   @id @default(uuid())
  ownerId   String
  userId    String
  createdAt DateTime @default(now())

  owner User @relation("ReferralsMade", fields: [ownerId], references: [id])
  user  User @relation("ReferralsUsed", fields: [userId], references: [id])
}

model Project {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  desc      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectMembers ProjectMember[]
  schedules      Schedule[]
  posts          Post[]
  campaigns      Campaign[]
  tags           Tag[]           @relation("ProjectTags")
  comments       Comment[]
  AIInsight      AIInsight[]
  Workspace      Workspace?      @relation(fields: [workspaceId], references: [id])
  workspaceId    String?
}

model ProjectMember {
  id          String  @id @default(uuid())
  projectId   String
  userId      String
  role        String?
  permissions Json?

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Post {
  id          String    @id @default(uuid())
  projectId   String
  content     String
  mediaUrl    String?
  type        String
  status      String    @default("draft")
  scheduledAt DateTime?
  publishedAt DateTime?

  project    Project       @relation(fields: [projectId], references: [id])
  schedules  Schedule[]
  tags       Tag[]         @relation("PostTags")
  analytics  Analytics[]
  insights   AIInsight[]
  comments   Comment[]
  versions   PostVersion[]
  Campaign   Campaign?     @relation(fields: [campaignId], references: [id])
  campaignId String?
}

model PostVersion {
  id        String   @id @default(uuid())
  postId    String
  content   String
  mediaUrl  String?
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
}

model Campaign {
  id        String   @id @default(uuid())
  projectId String
  name      String
  desc      String?
  startDate DateTime
  endDate   DateTime

  project Project @relation(fields: [projectId], references: [id])
  posts   Post[]
}

model Schedule {
  id          String    @id @default(uuid())
  userId      String
  projectId   String?
  postId      String?
  platform    String
  date        DateTime
  status      String    @default("scheduled")
  publishedAt DateTime?

  user    User     @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  projects Project[] @relation("ProjectTags")
  posts    Post[]    @relation("PostTags")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  entity    String
  entityId  String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model WithdrawalRequest {
  id        String   @id @default(uuid())
  userId    String
  method    String
  details   String
  amount    Int
  status    String   @default("pending")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model CreditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  amount    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Order {
  id          String   @id @default(cuid())
  productId   String
  buyerId     String
  creditsPaid Int
  platformFee Int
  sellerEarn  Int
  createdAt   DateTime @default(now())

  buyer   User    @relation(fields: [buyerId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Product {
  id           String   @id @default(cuid())
  title        String
  description  String?
  type         String
  priceCredits Int
  fileUrl      String
  thumbnailUrl String?
  ownerId      String
  createdAt    DateTime @default(now())

  owner     User    @relation(fields: [ownerId], references: [id])
  orders    Order[]
  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
}

model AIInsight {
  id         String   @id @default(uuid())
  postId     String?
  projectId  String?
  suggestion String
  confidence Float
  createdAt  DateTime @default(now())

  post    Post?    @relation(fields: [postId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  postId    String?
  projectId String?
  message   String
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
}

model Analytics {
  id        String   @id @default(uuid())
  postId    String
  views     Int      @default(0)
  likes     Int      @default(0)
  comments  Int      @default(0)
  clicks    Int      @default(0)
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
}

model Achievement {
  id        String   @id @default(uuid())
  userId    String
  title     String
  icon      String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Workspace {
  id        String   @id @default(uuid())
  name      String
  domain    String?
  logoUrl   String?
  createdAt DateTime @default(now())

  users    User[]
  projects Project[]
}

model MediaLibrary {
  id        String   @id @default(uuid())
  userId    String
  fileUrl   String
  type      String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model UserIntegration {
  id        String    @id @default(uuid())
  userId    String
  platform  String
  token     String
  refresh   String?
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, platform])
}

model WebhookLog {
  id        String   @id @default(uuid())
  platform  String
  event     String
  payload   Json
  createdAt DateTime @default(now())
}

model ApiUsage {
  id        String   @id @default(uuid())
  userId    String
  service   String
  tokens    Int
  credits   Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model IntegrationErrorLog {
  id        String   @id @default(uuid())
  userId    String?
  platform  String
  errorMsg  String
  payload   Json?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model CreditsUsage {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.VarChar(512)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}
model Plan {
  id            String   @id @default(uuid())
  name          String
  priceMonthly  Int
  credits       Int
  requestLimit  Int       @default(100) // limit per minute/hour
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  requests PlanRequest[]
}

model PlanRequest {
  id        String   @id @default(uuid())
  userId    String
  planId    String
  status    String   @default("pending") // pending | approved | rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])
}
